#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SitefinityWebApp.ResourcePackages.Bootstrap.MVC.Views.Event
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/MVC/Views/Event/Detail.EventDetails.cshtml")]
    public partial class Detail_EventDetails : System.Web.Mvc.WebViewPage<dynamic>
    {
        public Detail_EventDetails()
        {
        }
        public override void Execute()
        {
WriteLiteral("using System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nu" +
"sing System.Web.Mvc;\r\nusing Telerik.Sitefinity.ContentLocations;\r\nusing Telerik." +
"Sitefinity.Events.Model;\r\nusing Telerik.Sitefinity.Frontend.Events.Mvc.Models;\r\n" +
"using Telerik.Sitefinity.Frontend.Events.Mvc.StringResources;\r\nusing Telerik.Sit" +
"efinity.Frontend.Mvc.Infrastructure.Controllers;\r\nusing Telerik.Sitefinity.Front" +
"end.Mvc.Infrastructure.Controllers.Attributes;\r\nusing Telerik.Sitefinity.Modules" +
".Pages.Configuration;\r\nusing Telerik.Sitefinity.Mvc;\r\nusing Telerik.Sitefinity.S" +
"ervices;\r\nusing Telerik.Sitefinity.Taxonomies.Model;\r\n\r\nnamespace Telerik.Sitefi" +
"nity.Frontend.Events.Mvc.Controllers\r\n{\r\n    /// <summary>\r\n    /// This class r" +
"epresents the controller of the Events widget.\r\n    ///\r\n</summary>\r\n    [Contro" +
"llerToolboxItem(Name = \"Events_MVC\", Title = \"Events\", SectionName = ToolboxesCo" +
"nfig.ContentToolboxSectionName, ModuleName = \"Events\", CssClass = EventControlle" +
"r.WidgetIconCssClass)]\r\n    [Localization(typeof(EventResources))]\r\n    public c" +
"lass EventController : Controller, IContentLocatableView\r\n    {\r\n        #region" +
" Properties\r\n\r\n        /// <summary>\r\n    /// Gets the Events widget model.\r\n   " +
" ///\r\n</summary>\r\n        /// <value>\r\n    /// The model.\r\n    ///\r\n</value>\r\n  " +
"      [TypeConverter(typeof(ExpandableObjectConverter))]\r\n        public virtual" +
" IEventModel Model\r\n        {\r\n            get\r\n            {\r\n                i" +
"f (this.model == null)\r\n                    this.model = ControllerModelFactory." +
"GetModel<IEventModel>\r\n    (this.GetType());\r\n\r\n    return this.model;\r\n    }\r\n " +
"   }\r\n\r\n    /// <summary>\r\n        /// Gets or sets the name of the template tha" +
"t will be displayed when widget is in List view.\r\n        ///\r\n    </summary>\r\n " +
"   /// <value>\r\n        /// The name of the list template.\r\n        ///\r\n    </v" +
"alue>\r\n    public string ListTemplateName\r\n    {\r\n    get\r\n    {\r\n    return thi" +
"s.listTemplateName;\r\n    }\r\n\r\n    set\r\n    {\r\n    this.listTemplateName = value;" +
"\r\n    }\r\n    }\r\n\r\n    /// <summary>\r\n        /// Gets or sets the name of the te" +
"mplate that will be displayed when widget is in Detail view.\r\n        ///\r\n    <" +
"/summary>\r\n    /// <value>\r\n        /// The name of the details template.\r\n     " +
"   ///\r\n    </value>\r\n    public string DetailTemplateName\r\n    {\r\n    get\r\n    " +
"{\r\n    return this.detailTemplateName;\r\n    }\r\n\r\n    set\r\n    {\r\n    this.detail" +
"TemplateName = value;\r\n    }\r\n    }\r\n\r\n    /// <summary>\r\n        /// Gets or se" +
"ts a value indicating whether detail view for the event should be opened in the " +
"same page.\r\n        ///\r\n    </summary>\r\n    /// <value>\r\n        /// <c>true</c" +
"> if details link should be opened in the same page; otherwise, (if should redir" +
"ect to custom selected page)<c>false</c>.\r\n        ///\r\n    </value>\r\n    public" +
" bool OpenInSamePage\r\n    {\r\n    get\r\n    {\r\n    return this.openInSamePage;\r\n  " +
"  }\r\n\r\n    set\r\n    {\r\n    this.openInSamePage = value;\r\n    }\r\n    }\r\n\r\n    ///" +
" <summary>\r\n        /// Gets or sets the id of the page where will be displayed " +
"details view for selected item.\r\n        ///\r\n    </summary>\r\n    /// <value>\r\n " +
"       /// The details page id.\r\n        ///\r\n    </value>\r\n    public Guid Deta" +
"ilsPageId { get; set; }\r\n\r\n    /// <summary>\r\n        /// Gets or sets a value i" +
"ndicating whether the canonical URL tag should be added to the page when the can" +
"onical meta tag should be added to the page.\r\n        /// If the value is not se" +
"t, the settings from SystemConfig -> ContentLocationsSettings -> DisableCanonica" +
"lURLs will be used.\r\n        ///\r\n    </summary>\r\n    /// <value>The disable can" +
"onical URLs.</value>\r\n    public bool? DisableCanonicalUrlMetaTag\r\n    {\r\n    ge" +
"t\r\n    {\r\n    return this.disableCanonicalUrlMetaTag;\r\n    }\r\n\r\n    set\r\n    {\r\n" +
"    this.disableCanonicalUrlMetaTag = value;\r\n    }\r\n    }\r\n\r\n    #endregion\r\n\r\n" +
"    /// <summary>\r\n        /// Renders appropriate list view depending on the <s" +
"ee");

WriteLiteral(" cref=\"ListTemplateName\"");

WriteLiteral(" />\r\n        ///\r\n    </summary>\r\n    /// <param");

WriteLiteral(" name=\"page\"");

WriteLiteral(">The page.</param>\r\n    /// <returns>\r\n        /// The <see");

WriteLiteral(" cref=\"ActionResult\"");

WriteLiteral(@" />.
        ///
    </returns>
    public ActionResult Index(int? page)
    {
    var viewModel = this.Model.CreateListViewModel(null, page: page ?? 1);

    this.InitializeListViewBag(""/{0}"");

    if (SystemManager.CurrentHttpContext != null)
    this.AddCacheDependencies(this.Model.GetKeysOfDependentObjects(viewModel));

    var fullTemplateName = EventController.ListTemplateNamePrefix + this.ListTemplateName;
    return this.View(fullTemplateName, viewModel);
    }

    /// <summary>
        /// Renders appropriate list view depending on the <see");

WriteLiteral(" cref=\"ListTemplateName\"");

WriteLiteral(" />\r\n        ///\r\n    </summary>\r\n    /// <param");

WriteLiteral(" name=\"taxonFilter\"");

WriteLiteral(">The taxonomy filter.</param>\r\n    /// <param");

WriteLiteral(" name=\"page\"");

WriteLiteral(">The page.</param>\r\n    /// <returns>\r\n        /// The <see");

WriteLiteral(" cref=\"ActionResult\"");

WriteLiteral(@" />.
        ///
    </returns>
    public ActionResult ListByTaxon(ITaxon taxonFilter, int? page)
    {
    var fullTemplateName = EventController.ListTemplateNamePrefix + this.ListTemplateName;
    this.InitializeListViewBag(""/"" + taxonFilter.UrlName + ""/{0}"");

    var viewModel = this.Model.CreateListViewModel(taxonFilter, page ?? 1);
    if (SystemManager.CurrentHttpContext != null)
    this.AddCacheDependencies(this.Model.GetKeysOfDependentObjects(viewModel));

    return this.View(fullTemplateName, viewModel);
    }

    /// <summary>
        /// Renders appropriate details view depending on the <see");

WriteLiteral(" cref=\"DetailTemplateName\"");

WriteLiteral(" />\r\n        ///\r\n    </summary>\r\n    /// <param");

WriteLiteral(" name=\"item\"");

WriteLiteral(">The item which details will be displayed.</param>\r\n    /// <returns>\r\n        //" +
"/ The <see");

WriteLiteral(" cref=\"ActionResult\"");

WriteLiteral(@" />.
        ///
    </returns>
    public ActionResult Details(Event item)
    {
    var viewModel = this.Model.CreateDetailsViewModel(item);

    this.InitializeDetailsViewBag(item);

    if (SystemManager.CurrentHttpContext != null)
    this.AddCacheDependencies(this.Model.GetKeysOfDependentObjects(viewModel));

    var fullTemplateName = EventController.DetailTemplateNamePrefix + this.DetailTemplateName;
    return this.View(fullTemplateName, viewModel);
    }

    /// <summary>
        /// Gets the information for all of the content types that a control is able to show.
        ///
    </summary>
    /// <returns>
        /// List of location info of the content that this control is able to show.
        ///
    </returns>
    [NonAction]
    public virtual IEnumerable<IContentLocationInfo>
        GetLocations()
        {
        return this.Model.GetLocations();
        }

        /// <summary>
            /// Called when a request matches this controller, but no method with the specified action name is found in the controller.
            ///
        </summary>
        /// <param");

WriteLiteral(" name=\"actionName\"");

WriteLiteral(@">The name of the attempted action.</param>
        protected override void HandleUnknownAction(string actionName)
        {
        this.Index(null).ExecuteResult(this.ControllerContext);
        }

        /// <summary>
            /// Initializes the ListView bag.
            ///
        </summary>
        /// <param");

WriteLiteral(" name=\"redirectPageUrl\"");

WriteLiteral(@">The redirect page URL.</param>
        private void InitializeListViewBag(string redirectPageUrl)
        {
        this.ViewBag.CurrentPageUrl = SystemManager.CurrentHttpContext != null ? this.GetCurrentPageUrl() : string.Empty;
        this.ViewBag.RedirectPageUrlTemplate = this.ViewBag.CurrentPageUrl + redirectPageUrl;
        this.ViewBag.ItemsPerPage = this.Model.ItemsPerPage;
        this.ViewBag.AllowCalendarExport = this.Model.AllowCalendarExport;
        this.ViewBag.OpenInSamePage = this.OpenInSamePage;
        this.ViewBag.DetailsPageId = this.DetailsPageId;
        }

        /// <summary>
            /// Initializes the DetailsView bag.
            ///
        </summary>
        /// <param");

WriteLiteral(" name=\"item\"");

WriteLiteral(@">The event.</param>
        private void InitializeDetailsViewBag(Event item)
        {
        if (item != null)
        this.ViewBag.Title = item.Title;

        this.ViewBag.AllowCalendarExport = this.Model.AllowCalendarExport;
        }

        private const string WidgetIconCssClass = ""sfEventsViewIcn sfMvcIcn"";
        private const string ListTemplateNamePrefix = ""List."";
        private const string DetailTemplateNamePrefix = ""Detail."";

        private IEventModel model;
        private bool openInSamePage = true;

        private string listTemplateName = ""EventsList"";
        private string detailTemplateName = ""EventDetails"";
        private bool? disableCanonicalUrlMetaTag;
        }
        }
    ");

        }
    }
}
#pragma warning restore 1591
